"""XHTML Widgets"""

import string
import time

footer =  '''Generated by OraclePyDoc on ''' + time.ctime() + \
          '''</div>\n</body></html>\n'''


class HtmlWidgets:

    def __init__(self, name, css, webEncoding, notNulls):
        self.name = name
        self.css = css
        self.webEncoding = webEncoding
        self.notNulls = notNulls

    def i(self, text):
        return "<i>%s</i>" %text

    def anchor(self, name):
        return '<a name="%s"></a>' % name

    def heading(self, text, level):
        return '''<h%s>%s</h%s>\n''' % (level,text,level)

    def href(self, url, text, target_frame = None):
        if not target_frame:
            return '''<a href="%s">%s</a>''' % (url, text)
        else:
            return '''<a href="%s" target="%s">%s</a>''' % (url, target_frame, text)

    def imgMap(self, name, content):
        return '<map name="%s">%s</map>' % (name, content)

    def img(self, url, htmlMap='mainmap', cssClass='erd'):
        return '<img class="%s" usemap="#%s" src="%s"/>' % (cssClass, htmlMap, str(url))

    def page_header(self, title):
        return '''<?xml version="1.0" encoding="%s" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head><title> %s - %s </title>
        <link rel="stylesheet" type="text/css" href="%s" />
        <meta http-equiv="Content-Type" content="text/html;charset=%s" />
        <meta name="author" content="Petr Vanek, petr@scribus.info" />
        <meta name="generator" content="oraschemadoc" />
        </head>
        <body>''' % (self.webEncoding, self.name , title, self.css, self.webEncoding)

    def context_bar(self, local_nav_bar):
        text = []
        text.append('''
            <div class="contextbar">
            <a href="main.html">Main</a>
            <a href="tables-list.html">Tables</a>
            <a href="views-list.html">Views</a>
            <a href="mviews-list.html">Materialized&nbsp;Views</a>
            <a href="indexes-list.html">Indexes</a>
            <a href="constraints-list.html">Constraints</a>
            <a href="triggers-list.html">Triggers</a>
            <a href="procedures-list.html">Procedures</a>
            <a href="functions-list.html">Functions</a>
            <a href="packages-list.html">Packages</a>
            <a href="sequences.html">Sequences</a>
            <a href="java-sources-list.html">Java&nbsp;Sources</a>
            <a href="jobs.html">Jobs</a>
            <a href="sanity-check.html">Sanity&nbsp;Check</a>
            <a href="symbol-index.html">Index</a>
            <a href="sql_sources/" target="Main">DDL&nbsp;scrips</a>
            </div>''')

        if local_nav_bar:
            text.append('<div class="subcontextbar">')
            for label, link in local_nav_bar:
                text.append('<a href="#%s">%s</a> ' % (link, label))
            text.append('</div>')
        return ''.join(text)


    def frame_header(self, title):
        header = '''<?xml version="1.0" encoding="%s" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head><title> %s</title>
        <link rel="stylesheet" type="text/css" href="%s" />
        <meta http-equiv="Content-Type" content="text/html;charset=%s" />
        <meta name="author" content="Petr Vanek, petr@scribus.info" />
        <meta name="generator" content="oraschemadoc" />
        </head>
        <body class="navigationframe">''' % (self.webEncoding, title, self.css, self.webEncoding)
        return header + self.heading(title,1)

    def frame_footer(self):
        return "</body></html>"

    def page_footer(self):
        return '''<div class="footer">''' + footer

    def href_to_column(self, label, table_name, column_name):
        return '<a href="table-%s.html#col-%s">%s </a>\n' % (table_name, column_name, label)

    def href_to_constraint(self, label, table_name, constraint_name, target_frame = None):
        if not target_frame:
            return '<a href="table-%s.html#cs-%s">%s </a>\n' % (table_name, constraint_name, label)
        else:
            return '<a href="table-%s.html#cs-%s" target="%s">%s </a>\n' % (table_name, constraint_name, target_frame, label)

    def href_to_trigger(self, label, table_name, trigger_name, triggerType, target_frame = None):
        if not target_frame:
            return '<a href="%s-%s.html#trg-%s">%s </a>\n' % (triggerType, table_name, trigger_name, label)
        else:
            return '<a href="%s-%s.html#trg-%s" target="%s">%s </a>\n' % (triggerType, table_name, trigger_name, target_frame, label)

    def href_to_index(self, label, table_name, index_name, target_frame = None):
        if not target_frame:
            return '<a href="table-%s.html#ind-%s">%s </a>\n' % (table_name, index_name, label)
        else:
            return '<a href="table-%s.html#ind-%s" target="%s">%s </a>\n' % (table_name, index_name, target_frame, label)

    def href_to_table(self, table_name, target_frame = None):
        if not target_frame:
            return '<a href="table-%s.html"> %s </a>' % (table_name, table_name)
        else:
            return '<a href="table-%s.html" target="%s"> %s </a>' % (table_name, target_frame, table_name)
    def href_to_sequence(self, name, target_frame = None):
        if not target_frame:
            return '<a href="sequences.html#%s"> %s </a>' % (name, name)
        else:
            return '<a href="sequences.html#%s" target="%s"> %s </a>' % (name, target_frame, name)

    def href_to_view(self, view_name, target_frame = None):
        if not target_frame:
            return '<a href="view-%s.html"> %s </a>' % (view_name, view_name)
        else:
            return '<a href="view-%s.html" target="%s"> %s </a>' % (view_name, target_frame, view_name)

    def href_to_mview(self, mview_name, target_frame = None):
        if not target_frame:
            return '<a href="mview-%s.html"> %s </a>' % (mview_name, mview_name)
        else:
            return '<a href="mview-%s.html" target="%s"> %s </a>' % (mview_name, target_frame, mview_name)

    def href_to_procedure(self, procedure_name, target_frame = None):
        if not target_frame:
            return '<a href="procedure-%s.html"> %s </a>' % (procedure_name, procedure_name)
        else:
            return '<a href="procedure-%s.html" target="%s"> %s </a>' % (procedure_name, target_frame, procedure_name)

    def href_to_function(self, function_name, target_frame = None):
        if not target_frame:
            return '<a href="function-%s.html"> %s </a>' % (function_name, function_name)
        else:
            return '<a href="function-%s.html" target="%s"> %s </a>' % (function_name, target_frame, function_name)

    def href_to_package(self, package_name, target_frame = None):
        if not target_frame:
            return '<a href="package-%s.html"> %s </a>' % (package_name, package_name)
        else:
            return '<a href="package-%s.html" target="%s"> %s </a>' % (package_name, target_frame, package_name)

    def href_to_view_column(self, label, view_name, column_name):
        return '<a href="view-%s.html#col-%s">%s </a>\n' % (view_name, column_name, label)

    def href_to_java_source(self, name, target_frame = None):
        if not target_frame:
            return '<a href="java-source-%s.html"> %s </a>' % (name.replace("/","-"), name)
        else:
            return '<a href="java-source-%s.html" target="%s"> %s </a>' % (name.replace("/","-"), target_frame, name)

    def href_to_job(self, name, target_frame=None):
        return '<a href="jobs.html#%s"> %s </a>' % (name, name)

    def hr(self):
        return '<hr>\n'

    def pre(self, text):
        return '<pre>\n%s</pre>\n' % text


    def p(self, text):
        return '<p>%s</p>' % text


    def table(self, name, headers, rows, width = None):
        text = []
        if name:
            text.append(self.heading(name,3))
        if not rows:
            text.append('<p>None</p>')
            return ''.join(text)
        if width:
            text.append('<table width="')
            text.append(str(width))
            text.append('">')
        else:
            text.append('<table>\n')
        text.append('<tr>')
        for header in headers:
            text.append('<th>')
            text.append(header)
            text.append('</th>')
        text.append('</tr>')
        for row in rows:
            text.append('<tr>')
            for column in row:
                if column:
                   text.append('<td>')
                   text.append(str(column))
                   text.append('</td>')
                else:
                   text.append('<td>&nbsp;</td>')
            text.append('</tr>\n')
        text.append('</table>')
        return ''.join(text)


    def _index_page(self, name):
        return '''<?xml version="1.0" encoding="'''+ self.webEncoding +'''" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "XHTML1-f.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head><title>''' + name + '''</title>
        <meta http-equiv="Content-Type" content="text/html;charset='''+ self.webEncoding + '''" />
        <meta name="author" content="Petr Vanek, petr@scribus.info" />
        <meta name="generator" content="oraschemadoc" />
        </head>
        <frameset cols="21%,79%">
          <frame src="nav.html" name="List" />
          <frame src="main.html" name="Main" />
        <noframes>
        <body>
        <h2>Frame Alert</h2>
        <p>This document is designed to be viewed using the frames feature.
        If you see this message, you are using a non-frame-capable web client.</p>
        <p>Link to<a href="main.html">Non-frame version.</a></p>
        </body>
        </noframes>
        </frameset>
        </html>'''


    def _global_nav_frame(self, name):
        return '''<?xml version="1.0" encoding="%s" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head><title> %s</title>
        <link rel="stylesheet" type="text/css" href="%s" />
        <meta http-equiv="Content-Type" content="text/html;charset=%s" />
        <meta name="author" content="Petr Vanek, petr@scribus.info" />
        <meta name="generator" content="oraschemadoc" />
        </head>
        <body class="navigationframe">
                  <a href="tables-index.html">Tables</a>
                  <a href="views-index.html">Views</a>
                  <a href="mviews-index.html">Materialized&nbsp;Views</a>
                  <a href="indexes-index.html">Indexes</a>
                  <a href="constraints-index.html">Constraints</a>
                  <a href="triggers-index.html">Triggers</a>
                  <a href="procedures-index.html">Procedures</a>
                  <a href="functions-index.html">Functions</a>
                  <a href="packages-index.html">Packages</a>
                  <a href="sequences-index.html">Sequences</a>
                  <a href="java-sources-index.html">Java&nbsp;Sources</a>
                  <a href="sanity-check.html" target="Main">Sanity&nbsp;Check</a>
                  <a href="sql_sources/" target="Main">DDL&nbsp;scrips</a>
        </body></html>''' % (self.webEncoding, name, self.css, self.webEncoding)

    def _quotehtml (self, text):
        text = string.replace(text, "&", "&amp;")
        text = string.replace(text, "\\", "&quot;")
        text = string.replace(text, "<", "&lt;")
        text = string.replace(text, ">", "&gt;")
        return text

    def _main_frame(self, name, description, highlight, imgname=None):
        text = []
        text.append(self.page_header("name"))
        text.append(self.context_bar( None))
        text.append(self.heading(name,1))
        text.append(self.p('<b>Description:</b> %s' % description))
        if imgname != None:
            text.append(imgname)
        if highlight:
            h = 'Yes'
        else:
            h = 'No'
        text.append(self.p('<b>Using syntax highlighting:</b> %s' % h))
        text.append(self.p('<b>Character set:</b> ' + self.webEncoding))
        if not self.notNulls:
            text.append(self.p('''<b>Constraints:</b> NOT NULL constraints are skipped.
                                This information is kept in colums list. You can enable
                                its listing by <code>--nn</code> option.'''))
        text.append(self.p('''<b>DDL Scripts:</b> Obtaining the DDL script depends on
                              the DBMS_METADATA package.
                              So it's limited only for Oracle version 9 and greater and for users
                              with EXECUTE privilege on this package.'''))
        text.append(self.page_footer())
        return ''.join(text)

